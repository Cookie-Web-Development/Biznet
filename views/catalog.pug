doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        link(rel="shortcut icon", href="/public/img/logo/icon.ico", type="image/x-icon")
        link(rel="stylesheet" href="https://use.fontawesome.com/releases/v6.1.2/css/all.css")
        link(rel="stylesheet", href="/public/css/index.css")
        script(src="/public/js/scripts.js" defer) 
        title BizNet Technology
    body
        header.header
            section.header_top
                svg(viewBox="0 0 444 121" fill="none" xmlns="http://www.w3.org/2000/svg" class='logo_svg')
                    g(class="logo_main")
                        path(fill-rule="evenodd" clip-rule="evenodd" d="M46.5 44H79C89 45.8333 106.3 55.1 95.5 77.5C104.5 86.5 114.7 107.3 83.5 118.5H46.5V44ZM62.5 58.5V72.5H79C87 66.5 82.3333 60.6667 79 58.5H62.5ZM62.5 104.5V87.5H82.5C94.1 93.9 87.3333 101.5 82.5 104.5H62.5Z")
                        path(fill-rule="evenodd" clip-rule="evenodd" d="M3.5 115.5H1V119.5H44.5V115.5H42.5V36L28.5 30.5V16.5L26.5 14.5V29.5L21 27V5.5L18 1.5V26L3.5 21V115.5ZM9.5 54V50.5H36.5V54H9.5ZM9.5 86.5V82.5H36.5V86.5H9.5Z")
                        path(d="M122.5 44V118.5H139.5V44H122.5Z")
                        path(d="M159 44V58.5H185.5L156 118.5H208.5V104.5H181.5V103.5L210.5 44.5L159 44Z")
                        path(d="M280.5 86V44.5H297.5V118.5L280.5 105V86Z")
                        path(d="M318.5 44.5V118.5H370.5V104.5H335.5V89.5H364.5V74.5H335.5V58.5H370.5V44.5H318.5Z")
                        path(d="M383.5 44.5V58.5H405.5V118.5H420.5V58.5H443.5V44.5H383.5Z")
                    path(class="logo_sub" d="M227 119.5V45H230L297.5 101V119.5L244 77.5V119.5H227Z")
                    g(class="logo_white")
                        path(d="M10 46.5V42H36.5V46.5H10Z")
                        path(d="M10 62.5V58.5H36.5V62.5H10Z")
                        path(d="M10 71.5V67H36.5V71.5H10Z")
                        path(d="M10 80V75.5H36.5V80H10Z")
                        path(d="M10 103.5V99H36.5V103.5H10Z")
                        path(d="M10 111V107.5H36.5V111H10Z") 
                div.login
                    button.button.btn_main#login_modal_btn LOGIN
            nav.header_bot
                ul.navbar
                    li Home
                    li Catalog
                    li Deals
        dialog(id='login_modal')
            span.login_text Login
            form(action="" id='login_form')
                label(for="username") Username
                input(class='input_box' id='username' type='text' autocomplete="off")
                label(for='password') Password 
                div(class='input_div password')
                    input(id='password' type='password' autocomplete="off")
                    label(class='show_password' for='show_password_checkbox')
                        input(type='checkbox' id='show_password_checkbox' checked=false autocomplete="off")
                        i(id='show_password_off' class="fa-solid fa-eye-slash fa-lg show_password_icon active")
                        i(id='show_password_on' class="fa-sharp fa-solid fa-eye fa-lg show_password_icon")
                button(class='button_forgot_password') Forgot password  
                button(class='button btn_modal' type='submit') Login 
                button(class='button btn_modal' ) Register 
                button(class='button btn_modal login-modal-close') Cancel
            button(class='button_modal_close login_modal_close') 
                i(class="fa-solid fa-circle-xmark fa-xl")
        main 
            h2 Catalog 
            section#product_search_section
                div.product_filter_container
                    form(id='catalog_seach_form' action='/catalog' method='post')
                        div.search_container
                            label
                                p.search_container_title By name 
                                input(type='text', class='input_box', name='name', data-reset='text')
                        div.search_container
                            label 
                                p.search_container_title By price range 
                                p#price_range_display.search_container_desc
                            div.range_container
                                div(id='range_slider_visual')
                                input(type='range', class='price_range_input', id='min_range_slider', name='price_range_min', data-reset='range_min')
                                input(type='range', class='price_range_input', id='max_range_slider', name='price_range_max', data-reset='range_max')
                        div.search_container
                            label 
                                p.search_container_title By category 
                                select(data-reset='select', class='input_box', name='category')
                                    option(value='') Select a category
                                    each category in search_fields.category_fields
                                        option(value=category)=category 
                        div.search_container
                            label 
                                p.search_container_title By brand 
                                select(data-reset='select', class='input_box', name='brand') 
                                    option(value='') Select a brand 
                                    each brand in search_fields.brand_fields 
                                        option(value=brand)=brand
                        div.search_container#tags_filter
                            label(for='tags_filter_input')
                                p.search_container_title By tags
                            div#tags_input_dropdown_container
                                input(type='text', class='input_box', id='tags_filter_input', data-reset='text') 
                                select(id='tags_dropdown' size='8') 
                            ul#selected_tags
                        div.search_container.single_option
                            label(for='discount_checkbox') 
                                p.search_container_title On sale 
                            input(type='checkbox', value="true", name='discount', data-reset='checkbox', id='discount_checkbox')
                        div.search_container.single_option
                            label(for='featured_checkbox') 
                                p.search_container_title Best seller 
                            input(type='checkbox', value="true", name='featured', data-reset='checkbox', id='featured_checkbox')
                        button(type='button', class='button btn_inline', id='search_field_reset') Clear search fields
                div.product_result_container
                    div=filtered_data
        footer 
            div

        script.
            /*### Global_variables ###*/
            let debounce_delay = 500 //ms
            let eventDispatcherCheck = false; //helps debounce when events are fired multiple times
            let eventAPI = 'sendToAPI'; //Custom event for API Endpoint

            /*### PRICE RANGE ###*/
            let min_slider = document.getElementById('min_range_slider');
            let max_slider = document.getElementById('max_range_slider');
            let price_range_display = document.getElementById('price_range_display');
            let range_slider_visual = document.getElementById('range_slider_visual');
            let price_range_db = !{JSON.stringify(search_fields.price_range)};

            [min_slider, max_slider].forEach(input => {
                Object.assign(input, {
                    min : price_range_db.min,
                    max : price_range_db.max, 
                    value : input === min_slider ? undefined || price_range_db.min : undefined || price_range_db.max
                })
            });

            displayPriceRange();

            min_slider.addEventListener('input', () => {
                if(+min_slider.value > +max_slider.value) {
                    min_slider.value = max_slider.value
                };
                displayPriceRange()
            });

            max_slider.addEventListener('input', () => {
                if(+max_slider.value < +min_slider.value) {
                    max_slider.value = min_slider.value
                };
                displayPriceRange()
            });
            
            function displayPriceRange(minRange = min_slider.value, maxRange = max_slider.value) {
                let blue = 'hsl(238, 83%, 62%)', grey = 'hsl(360, 0%, 35%)';
                let minCalc = (minRange / price_range_db.max) * 100,
                maxCalc = (maxRange / price_range_db.max) * 100;

                range_slider_visual.style.background = `linear-gradient(to right, ${grey} 0%, ${grey} ${minCalc}%, ${blue} ${minCalc}%, ${blue} ${maxCalc}%, ${grey} ${maxCalc}%, ${grey} 100%)`;

                price_range_display.textContent = `$ ${minRange} - $ ${maxRange}`
            };  

            /*### TAGS FILTER ###*/
            let tags_db = !{JSON.stringify(search_fields.tags_fields)};
            let tags_select_container = document.getElementById('selected_tags');
            let tags_dropdown = document.getElementById('tags_dropdown');
            let tags_text_filter = document.getElementById('tags_filter_input')
            let unselectedTags = undefined || [...tags_db];
            let tags_selected =  undefined || [];
           
            tagListCreator()
            
            tags_text_filter.addEventListener('input', () => {
                let input = tags_text_filter.value.toLowerCase();
                let options = tags_dropdown.options;
                if (input != ''){
                    for (let i = 0; i < options.length; i++) {
                        let tag = options[i];
                        let tagText = tag.text.toLowerCase();
                        if (tagText.includes(input)){
                            tag.style.display = ''
                        } else {
                            tag.style.display ='none'
                        }
                    }                    
                } else {
                    for(let i = 0; i < options.length; i++) {
                        let tag = options[i];
                        tag.style.display = '';
                    }
                }
            })

            tags_dropdown.addEventListener('click', (e) => {
                //console.log(e.target)
                let target = tags_dropdown.selectedOptions[0]
                if(target.dataset.tag) {
                    /*Arrays updater*/
                    unselectedTags = unselectedTags.filter((tag) => {return tag != target.dataset.tag}).sort();
                    tags_selected.push(target.dataset.tag);
                    tags_selected.sort();
                    tagListCreator();
                    
                    //Clear elements after selection
                    let container = Array.from(document.getElementById('tags_input_dropdown_container').children);
                    container.forEach(elem => {
                        elem.blur()
                    });
                    tags_text_filter.value = '';
                };
            });

            tags_select_container.addEventListener('click', (e) => {
                if(e.target.value) {
                    tags_selected = tags_selected.filter((tag) => {return tag != e.target.value}).sort();
                    unselectedTags.push(e.target.value);
                    unselectedTags.sort();

                    tagListCreator();
                    tags_dropdown.dispatchEvent(new Event(eventAPI))
                }
            })


            function tagListCreator() {
                let dropdown_children = Array.from(tags_dropdown.querySelectorAll('[data-tag]'));
                let tag_select_children =  Array.from(tags_select_container.children);

                /*Elements remover*/
                dropdown_children.forEach(child => { child.remove() });
                tag_select_children.forEach(child => { child.remove() });

                /*Elements creator*/
                if(unselectedTags.length > 0){
                    unselectedTags.forEach(tag => {
                        let option = document.createElement('option');
                        option.value = tag;
                        option.text= tag;
                        option.dataset.tag = tag;
                        tags_dropdown.appendChild(option);
                    });
                }

                if(tags_selected.length > 0) {
                    tags_selected.forEach(tag => {
                        let selection_item = document.createElement('li');
                        let selection_label = document.createElement('label');
                        let selection_checkbox = document.createElement('input');
                        let selection_text = document.createElement('span');
                        
                        selection_item.classList.add('selected_tag');
                        selection_checkbox.type = 'checkbox';
                        selection_checkbox.setAttribute('checked', true);
                        selection_checkbox.value = tag;
                        selection_checkbox.name = 'selected_tags'
                        selection_text.textContent = tag;

                        selection_label.appendChild(selection_checkbox);
                        selection_label.appendChild(selection_text);
                        selection_item.appendChild(selection_label);

                        tags_select_container.appendChild(selection_item);
                    });
                };

            };

            /*### RESET SEARCH BUTTON ###*/
            let resetBtn = document.getElementById('search_field_reset')
            
            resetBtn.addEventListener('click', () => {
                let inputElements = Array.from(document.querySelectorAll('[data-reset]'))
                unselectedTags = [...tags_db];
                tags_selected = [];
                tagListCreator();
                inputElements.forEach(input => {
                    switch(input.dataset.reset){
                        case 'text':
                            input.value = '';
                            break;
                        case 'select':
                            input.selectedIndex = 0;
                            break;
                        case 'checkbox':
                            input.checked = false;
                            break;
                        case 'range_min':
                            input.value = price_range_db.min;
                            displayPriceRange();
                            break;
                        case 'range_max':
                            input.value = price_range_db.max;
                            displayPriceRange();
                            break;
                        default:
                            console.log('something wrong with resetBtn')
                    };

                    /*API event Trigger*/
                    if(eventDispatcherCheck) { //prevents repeated fire of the dispatch
                        return;
                    } else {
                        eventDispatcherCheck = true; 
                        input.dispatchEvent(new Event(eventAPI))
                    }
                });
            })
            /*### API ENDPOINT ##*/
            let search_form = document.getElementById('catalog_seach_form');
            let input_fields = Array.from(search_form.querySelectorAll('input[name], select'));

            let xhr = new XMLHttpRequest();
            let endpoint = '/catalog';

            function debounce (func, delay) {
                let timeout;
                return (...args) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                        func(...args); 
                        eventDispatcherCheck = false //reverts the checker after debounce does its thing
                    }, delay);
                };
            };

            function submitForm () {
                let formData = new FormData(search_form);
                let data = {}
                for (let [key, value] of formData.entries()) {
                    if (key === "selected_tags") {
                        if(data[key]) {
                            data[key].push(value)
                        } else {
                            data[key] = [value];
                        }
                    } else {
                        data[key] = value
                    }
                };
                console.log('data is:')
                console.log(data)
                xhr.open("POST", endpoint);
                xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                xhr.onload = () => {
                    if (xhr.status === 200) {
                        let response = JSON.parse(xhr.responseText);
                        console.log(response);
                    } else {
                        console.error(xhr.statusText);
                    }
                };
                xhr.onerror = () => {
                    console.error(xhr.statusText);
                };
                xhr.send(JSON.stringify(data));
            };

            input_fields.forEach(input => {
                input.addEventListener(eventAPI, debounce(submitForm, debounce_delay));
                input.addEventListener('input', () => {
                    input.dispatchEvent(new Event(eventAPI))
                })
            });
        
            /*
            
            const xhr = new XMLHttpRequest();
            const url = "your-api-url";
            const formData = new FormData(document.getElementById("your-form-id"));
            const debounceDelay = 500;

            const debounce = (func, delay) => {
            let timeoutId;
            return (...args) => {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => {
                func(...args);
                }, delay);
            };
            };

            const submitForm = () => {
            const data = {};
            for (const [key, value] of formData.entries()) {
                data[key] = value;
            }

            xhr.open("POST", url);
            xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            xhr.onload = () => {
                if (xhr.status === 200) {
                const response = JSON.parse(xhr.responseText);
                console.log(response);
                } else {
                console.error(xhr.statusText);
                }
            };
            xhr.onerror = () => {
                console.error(xhr.statusText);
            };
            xhr.send(JSON.stringify(data));
            };

            const debouncedSubmit = debounce(submitForm, debounceDelay);

            const form = document.getElementById("your-form-id");
            form.addEventListener("input", debouncedSubmit);




            */