doctype html
html(lang=lang)
    include partials/_head.pug
    body
        include partials/_header.pug
        main 
            h2=langData.header.navbar.catalog[lang] 
            section#product_search_section
                include include/search_fields.pug
                div.product_display_container
                    div(id='product_result')
                    div(id='pagination', data-pagination-type='normal')
        footer 
        - let disclaimer_lang = lang
        include include/disclaimer.pug

        script.
            /*### Global_variables ###*/
            let lang = !{JSON.stringify(lang)};
            let debounce_delay = 500; //ms
            let eventDispatcherCheck = false; //helps debounce when events are fired multiple times
            let eventAPI = 'sendToAPI'; //Custom event for API Endpoint

            //Session_variables: this is to save current session values such as language, search values, pagination page, etc

            let search_query, save_session = true; //save_session es para evitar guardar quick_querry en search_session storage
            //Checks if applying either quick_query or search_session
            if (Object.keys(!{JSON.stringify(quick_query)}).length >= 1) {
                search_query = !{JSON.stringify(quick_query)};
                save_session = false;
                if(JSON.parse(sessionStorage.getItem('search_session')).sort_option) {
                    search_query.sort_option = JSON.parse(sessionStorage.getItem('search_session')).sort_option
                };
                if(search_query.selected_tags){
                    search_query.selected_tags = [search_query.selected_tags]
                }
            } else {
                search_query = JSON.parse(sessionStorage.getItem('search_session')) || {}
            }

            for (let key in search_query) {
                if (search_query.hasOwnProperty(key)) {
                    switch (key){
                        case 'name': 
                            document.querySelector(`input[name='${key}']`).value = search_query[key]
                            break;
                        case 'sort_option':
                        case 'category': 
                        case 'brand': 
                            let selectElem = document.querySelector(`select[name='${key}']`);
                            let selectionIndex = Array.from(selectElem.options).findIndex(option => option.value === search_query[key]);
                            selectElem.selectedIndex = selectionIndex;
                            break;
                        case 'discount': 
                        case 'featured':
                            document.querySelector(`input[name='${key}']`).checked = search_query[[key]] 
                            break;
                    }
                }
            }

            /*### PRICE RANGE ###*/
            let min_slider = document.getElementById('min_range_slider');
            let max_slider = document.getElementById('max_range_slider');
            let price_range_display = document.getElementById('price_range_display');
            let range_slider_visual = document.getElementById('range_slider_visual');
            let price_range_db = !{JSON.stringify(search_fields.price_range)};

            [min_slider, max_slider].forEach(input => {
                Object.assign(input, {
                    min : price_range_db.min,
                    max : price_range_db.max,
                    value: input === min_slider ? search_query.price_range_min || price_range_db.min : search_query.price_range_max || price_range_db.max 
                })
            });
            
            displayPriceRange();

            min_slider.addEventListener('input', () => {
                if(+min_slider.value > +max_slider.value) {
                    min_slider.value = max_slider.value
                };
                displayPriceRange()
            });

            max_slider.addEventListener('input', () => {
                if(+max_slider.value < +min_slider.value) {
                    max_slider.value = min_slider.value
                };
                displayPriceRange()
            });
            
            function displayPriceRange(minRange = min_slider.value, maxRange = max_slider.value) {
                let blue = 'hsl(238, 83%, 62%)', grey = 'hsl(360, 0%, 35%)';
                let minCalc = (minRange / price_range_db.max) * 100,
                maxCalc = (maxRange / price_range_db.max) * 100;

                range_slider_visual.style.background = `linear-gradient(to right, ${grey} 0%, ${grey} ${minCalc}%, ${blue} ${minCalc}%, ${blue} ${maxCalc}%, ${grey} ${maxCalc}%, ${grey} 100%)`;

                price_range_display.textContent = `$ ${minRange} - $ ${maxRange}`
            };  

            /*### TAGS FILTER ###*/
            let tags_db = !{JSON.stringify(search_fields.tags)};
            let tags_select_container = document.getElementById('selected_tags');
            let tags_dropdown = document.getElementById('tags_dropdown');
            let tags_text_filter = document.getElementById('tags_filter_input')
            let unselectedTags = [...tags_db];
            let tags_selected;
            
            if (search_query.selected_tags) {
                search_query.selected_tags.forEach(entry => { //Si hay seach_session, agrega a tags_selected
                    tags_selected ? tags_selected.push(...tags_db.filter((tag) => {return tag.tag_id == entry})) : tags_selected = tags_db.filter((tag) => {return tag.tag_id == entry});
                })

                tags_selected.forEach(tagId_selected => { //Si hay seach_session, elimina de unselectedTags
                    unselectedTags = unselectedTags.filter((tag_unselected) => {return tag_unselected.tag_id != tagId_selected.tag_id});
                })
            } else {
                tags_selected = [];
            }

            tagListCreator()
            
            tags_text_filter.addEventListener('input', () => {
                let input = tags_text_filter.value.toLowerCase();
                let options = tags_dropdown.options;
                if (input != ''){
                    for (let i = 0; i < options.length; i++) {
                        let tag = options[i];
                        let tagText = tag.text.toLowerCase();   
                        if (tagText.includes(input)){
                            tag.style.display = ''
                        } else {
                            tag.style.display ='none'
                        }
                    }                    
                } else {
                    for(let i = 0; i < options.length; i++) {
                        let tag = options[i];
                        tag.style.display = '';
                    }
                }
            })

            tags_dropdown.addEventListener('click', (e) => { //adding tags
                let target = tags_dropdown.selectedOptions[0]
                if(target.dataset.tag) {

                    /*Arrays updater*/
                    unselectedTags = unselectedTags.filter(tag => tag.tag_id != target.dataset.tag);

                    tags_selected = [...tags_selected, ...tags_db.filter(tag =>tag.tag_id == target.dataset.tag)]

                    tagListCreator();
                    
                    //Clear elements after selection
                    let container = Array.from(document.getElementById('tags_input_dropdown_container').children);
                    container.forEach(elem => {
                        elem.blur()
                    });
                    tags_text_filter.value = '';
                };

            });

            tags_select_container.addEventListener('click', (e) => { //deleting tags
                
                if(e.target.dataset.tag) {
                    let tag_target = tags_db.filter((tag) => {return tag.tag_id == e.target.dataset.tag});
                    tags_selected = tags_selected.filter((tag) => {return tag.tag_id != e.target.dataset.tag});

                    unselectedTags = [...unselectedTags, ...tag_target];

                    unselectedTags.sort((a, b) => {
                        if (a.name[lang] > b.name[lang]){
                            return 1
                        }
                        if (a.name[lang] < b.name[lang]) {
                            return -1
                        }

                        return 0
                    });
                    
                    tagListCreator();
                    tags_dropdown.dispatchEvent(new Event(eventAPI))
                }
                
            })


            function tagListCreator() {
                let dropdown_children = Array.from(tags_dropdown.querySelectorAll('[data-tag]'));
                let tag_select_children = Array.from(tags_select_container.children);

                /*Elements remover*/
                dropdown_children.forEach(child => { child.remove() });
                tag_select_children.forEach(child => { child.remove() });

                /*Elements creator*/
                if(unselectedTags.length > 0){

                    unselectedTags.forEach(tag_unselected => {
                        let option = document.createElement('option');
                        option.value = tag_unselected.tag_id;
                        option.text= tag_unselected.name[lang];
                        option.dataset.tag = tag_unselected.tag_id;
                        tags_dropdown.appendChild(option);
                    });
                }

                if(tags_selected.length > 0) {
                    tags_selected.forEach(tag => {
                        let selection_item = document.createElement('li');
                        let selection_label = document.createElement('label');
                        let selection_checkbox = document.createElement('input');
                        let selection_text = document.createElement('span');
                        
                        selection_item.classList.add('selected_tag');
                        selection_checkbox.type = 'checkbox';
                        selection_checkbox.setAttribute('checked', true);
                        selection_checkbox.value = tag.tag_id;
                        selection_checkbox.dataset.tag = tag.tag_id;
                        selection_checkbox.name = 'selected_tags';
                        selection_text.textContent = tag.name[lang];

                        selection_label.appendChild(selection_checkbox);
                        selection_label.appendChild(selection_text);
                        selection_item.appendChild(selection_label);

                        tags_select_container.appendChild(selection_item);
                    });
                };

            };

            /*### RESET SEARCH BUTTON ###*/
            let resetBtn = document.getElementById('search_field_reset')
            
            resetBtn.addEventListener('click', () => {
                let inputElements = Array.from(document.querySelectorAll('[data-reset]'))
                unselectedTags = [...tags_db];
                tags_selected = [];
                tagListCreator();
                inputElements.forEach(input => {
                    switch(input.dataset.reset){
                        case 'text':
                            input.value = '';
                            break;
                        case 'select':
                            input.selectedIndex = 0;
                            break;
                        case 'checkbox':
                            input.checked = false;
                            break;
                        case 'range_min':
                            input.value = price_range_db.min;
                            displayPriceRange();
                            break;
                        case 'range_max':
                            input.value = price_range_db.max;
                            displayPriceRange();
                            break;
                        default:
                            console.log('something wrong with resetBtn')
                    };

                    /*API event Trigger*/
                    if(eventDispatcherCheck) { //prevents repeated fire of the dispatch
                        return;
                    } else {
                        eventDispatcherCheck = true; 
                        input.dispatchEvent(new Event(eventAPI))
                    }
                });
            });

            /*### DISPLAY RESULTS ###*/
            let results_container = document.getElementById('product_result');
            let results_pagination = document.getElementById('pagination');
            let item_per_page = 8;
            let active_page = search_query.active_page || 1; //PENDING: set session value for active_page


            function display_results(results_arr) {
                //Element Remover
                Array.from(results_container.children).forEach(child => child.remove());
                Array.from(results_pagination.children).forEach(child => child.remove());
                results_pagination.style.display = 'none';

                if(!results_arr.length) {
                    let result_text = document.createElement('p');
                    result_text.textContent = 'Nothing here'
                    results_container.appendChild(result_text)
                } else { 
                    //Pagination
                    let start_index = (active_page - 1) * item_per_page;
                    let end_index = start_index + item_per_page;

                    let active_catalog_page = results_arr.slice(start_index, end_index);

                    if (results_arr.length > item_per_page) { //create pages UI
                        let total_pages = Math.ceil(results_arr.length / item_per_page);
                        results_pagination.style.display = 'flex'; 

                        let pagination_arr = [];

                        if(active_page !== 1) {
                            pagination_arr.push('prev');
                        }

                        pagination_arr.push('1')

                        for(let i = -3; i <= 3; i++ ) {
                            let result = active_page + i;
                            if ((i === -3 && result > 2) || ( i === 3 && result < total_pages - 1 )) {
                                pagination_arr.push('...')
                            } else {
                                if (result >= 2 && result < total_pages) {
                                    pagination_arr.push(`${result}`)
                                }
                            }
                        }

                        pagination_arr.push(`${total_pages}`)

                        if(active_page !== total_pages) {
                            pagination_arr.push('next')
                        }
                        if(pagination_arr.length > 0) {
                            pagination_arr.forEach(page => {
                                let create_elem;
                                switch(page){
                                    case `${active_page}`: //Plans for this, later
                                        create_elem = document.createElement('p');
                                        create_elem.setAttribute('id', 'page_current');
                                        break;
                                    case '...':
                                        create_elem = document.createElement('p');
                                        break;
                                    default: 
                                        create_elem = document.createElement('button');
                                        create_elem.classList.add('button', 'button_pagination');
                                        create_elem.dataset.pageValue = page
                                }
                                if (page == "prev" || page == "next") {
                                    page == 'prev' ? create_elem.innerHTML = "<i class='fa-solid fa-chevron-left'></i>" : create_elem.innerHTML = "<i class='fa-solid fa-chevron-right'></i>"; 
                                } else {
                                    create_elem.textContent = page;

                                }
                                results_pagination.appendChild(create_elem)
                            })
                        }
                    }
                    //Pagination function
                    results_pagination.querySelectorAll('button').forEach(button => {
                        button.addEventListener('click', () => {
                            let page_change_target = button.dataset.pageValue;
                            switch(page_change_target){
                                case 'prev':
                                    page_change_target = active_page - 1;
                                    break;
                                case 'next':
                                    page_change_target = active_page + 1;
                                    break;
                                default: 
                                    page_change_target = +page_change_target;
                            };
                            active_page = page_change_target;
                            display_results(results_arr)
                        })
                    })

                    //Product cards  creator
                    active_catalog_page.forEach(product => { //change to active_catalog_page when pagination works; keep results_arr while dev
                        // product_card PARENT
                        let product_card = document.createElement('article');
                        product_card.dataset.productCard = 'small';
                        
                        // ## image_container
                        let image_container = document.createElement('a');
                        image_container.classList.add('image_container');
                        image_container.setAttribute('href', `/product/${product._id}`);

                        // #### image
                        let image_elem = document.createElement('img');
                        image_elem.setAttribute('src', `/public/img/products-images/${product.listing[0].images[0]}`); //PENDING displayo different variations if necesarry


                        image_container.appendChild(image_elem);
                        product_card.appendChild(image_container); //Append to PARENT

                        // ## text_container
                        let text_container = document.createElement('div');
                        text_container.classList.add('text_container');

                        let text_header = document.createElement('p');
                        text_header.classList.add('text_container_header');
                        
                        let text_header_anchor_category = document.createElement('a');
                        let header_category_encoded = encodeURIComponent(`${product.category_name[lang]}`)
                        text_header_anchor_category.setAttribute('href', `/catalog?category=${header_category_encoded}`);
                        text_header_anchor_category.textContent = `${product.category_name[lang]}`
                        
                        let text_header_anchor_brand = document.createElement('a');
                        let header_brand_encoded = encodeURIComponent(`${product.brand}`)
                        text_header_anchor_brand.setAttribute('href', `/catalog?brand=${header_brand_encoded}`)
                        text_header_anchor_brand.textContent = `${product.brand_name}`;

                        text_header.appendChild(text_header_anchor_category);
                        text_header.appendChild(document.createTextNode(' / '));
                        text_header.appendChild(text_header_anchor_brand);
                        text_container.appendChild(text_header);

                        let text_name = document.createElement('h3');
                        let text_name_link = document.createElement('a');
                        text_name_link.textContent = `${product.name[lang]}`;
                        text_name_link.setAttribute('href', `/product/${product._id}`)

                        text_name.appendChild(text_name_link);
                        text_container.appendChild(text_name);

                        // #### price_tag
                        let price_container = document.createElement('a');
                        price_container.classList.add('product_card_price_tag');
                        price_container.setAttribute('href', `/product/${product._id}`)

                        let price_value = document.createElement('p');
                        price_value.classList.add('price_sell');
                        price_value.textContent = `${product.listing[0].format_price_discounted}`

                        price_container.appendChild(price_value);

                        if (product.listing[0].discount_percent > 0) {
                            let price_discount = document.createElement('p');
                            price_discount.classList.add('price_discount');

                            let price_before = document.createElement('span');
                            price_before.classList.add('price_before');
                            price_before.textContent = `${product.listing[0].format_price}`;
                            
                            let discount_percent = document.createElement('span');
                            discount_percent.classList.add('discount_percent');
                            discount_percent.textContent = `${Math.round(product.listing[0].discount_percent * 100)}%`;

                            price_discount.appendChild(price_before);
                            price_discount.appendChild(discount_percent);

                            price_container.appendChild(price_discount)
                        }

                        text_container.appendChild(price_container);

                        // #### text_description
                        let text_description = document.createElement('p');
                        text_description.classList.add('product_card_description')
                        text_description.textContent = `${product.description[lang]}`

                        text_container.appendChild(text_description);

                        // #### tag_list
                        let tags_list = document.createElement('ul')
                        tags_list.classList.add('product_card_tags')

                        product.tag_array.forEach(tag => {
                            let text_tag = document.createElement('li');
                            let anchor_tag = document.createElement('a');
                            let encodedTag = encodeURIComponent(tag.tag_id);
                            anchor_tag.textContent = tag.name[lang];
                            anchor_tag.setAttribute('href', `/catalog?selected_tags=${encodedTag}`)
                            text_tag.appendChild(anchor_tag);
                            tags_list.appendChild(text_tag);
                        })
                        
                        text_container.appendChild(tags_list);
                        
                        product_card.appendChild(text_container);

                        results_container.appendChild(product_card);
                    });
                }
            }

            /*### API ENDPOINT ##*/
            let search_form = document.getElementById('catalog_seach_form');
            let input_fields = Array.from(search_form.querySelectorAll('input[name], select'));

            let xhr = new XMLHttpRequest();
            let endpoint = '/catalog';

            function debounce (func, delay) {
                let timeout;
                return (...args) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                        func(...args); 
                        eventDispatcherCheck = false //reverts the checker after debounce does its thing
                    }, delay);
                };
            };

            function submitForm () {
                let formData = new FormData(search_form);
                let data = {}
                for (let [key, value] of formData.entries()) {
                    switch(key) {
                        case 'price_range_min':
                            (value != price_range_db.min) ? data[key] = value : undefined;
                            break;
                        case 'price_range_max':
                            (value != price_range_db.max) ? data[key] = value : undefined;
                            break;
                        case 'selected_tags':
                            (data[key]) ? data[key].push(value) : data[key] = [value];
                            break;
                        default: 
                            (value != "") ? data[key] = value : undefined;
                    }
                };

                xhr.open("POST", endpoint);
                xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                xhr.onload = () => {
                    if (xhr.status === 200) {
                        //Diferenciar entre quick_querie y search_query
                        if(save_session) {
                            sessionStorage.removeItem('search_session');
                            sessionStorage.setItem('search_session',  JSON.stringify(data));
                        } else {
                            save_session = true;
                        }
                        let response = JSON.parse(xhr.responseText);
                        active_page = 1;
                        display_results(response.api_results); 
                    } else {
                        console.error(xhr.statusText);
                    }
                };
                xhr.onerror = () => {
                    console.error(xhr.statusText);
                };
                xhr.send(JSON.stringify(data));
            };

            input_fields.forEach(input => {
                input.addEventListener(eventAPI, debounce(submitForm, debounce_delay));
                input.addEventListener('input', () => {
                    input.dispatchEvent(new Event(eventAPI))
                })
            });

            document.addEventListener("DOMContentLoaded", debounce(submitForm, debounce_delay))